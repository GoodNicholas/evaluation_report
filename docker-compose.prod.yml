version: '3.8'

services:
  app-v1:
    image: ghcr.io/${GITHUB_REPOSITORY:-your-org/lms}:v1
    container_name: lms-app-v1
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lms-v1.rule=Host(`api.example.com`) && PathPrefix(`/v1`)"
      - "traefik.http.services.lms-v1.loadbalancer.server.port=8000"
      - "traefik.http.routers.lms-v1.middlewares=lms-v1-strip"
      - "traefik.http.middlewares.lms-v1-strip.stripprefix.prefixes=/v1"

  app-v2:
    image: ghcr.io/${GITHUB_REPOSITORY:-your-org/lms}:v2
    container_name: lms-app-v2
    restart: unless-stopped
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    depends_on:
      - db
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lms-v2.rule=Host(`api.example.com`) && PathPrefix(`/v2`)"
      - "traefik.http.services.lms-v2.loadbalancer.server.port=8000"
      - "traefik.http.routers.lms-v2.middlewares=lms-v2-strip"
      - "traefik.http.middlewares.lms-v2-strip.stripprefix.prefixes=/v2"

  db:
    image: postgres:15
    container_name: lms-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  traefik:
    image: traefik:v2.10
    container_name: lms-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 