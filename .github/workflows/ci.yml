name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set environment variables
      run: |
        echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test_secret_key" >> $GITHUB_ENV
        echo "TELEGRAM_BOT_TOKEN=dummy" >> $GITHUB_ENV

    - name: Build backend image
      run: docker compose build backend

    - name: Start services
      run: docker compose up -d postgres redis

    - name: Run linters
      run: docker compose run --rm backend bash -c "ruff check . && ruff format --check . && black --check . && isort --check-only ."

    - name: Run type checking
      run: docker compose run --rm backend bash -c "mypy ."

    - name: Run tests with coverage
      run: docker compose run --rm backend bash -c "pytest --cov=app --cov-report=xml"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: true

    - name: Start backend for e2e tests
      run: docker compose up -d backend postgres redis

    - name: Set up Node
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps

    - name: Run Playwright tests
      run: |
        cd frontend
        npx playwright test

    - name: Shutdown containers
      if: always()
      run: docker compose down

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: evaluation-report:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 